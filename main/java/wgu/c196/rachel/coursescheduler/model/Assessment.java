package wgu.c196.rachel.coursescheduler.model;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * Class for an assessment.
 *
 * <p> This class defines an Assessment for a Course. It contains information on the title, type,
 * and start and end dates. </p>
 */
@Entity(tableName = "assessment_table",
        foreignKeys = {@ForeignKey(entity = Course.class, parentColumns = "id",
                childColumns = "course_id", onDelete = ForeignKey.CASCADE)} )
public class Assessment {

    @PrimaryKey(autoGenerate = true)
    private int id;

    private String title;

    private Type type;

    @ColumnInfo(name = "start_date")
    private LocalDate startDate;

    @ColumnInfo(name = "end_date")
    private LocalDate endDate;

    // The ID of the course the assessment is for
    @ColumnInfo(name = "course_id")
    private int courseId;

    /**
     * Default constructor for Assessment.
     */
    public Assessment() {
    }

    /**
     * Constructor for Assessment.
     *
     * @param title The name of the assessment
     * @param type The type of assessment, using enumeration Type
     * @param startDate The start date of the assessment
     * @param endDate The end date of the assessment
     * @param courseId The ID of the course the assessment is for
     */
    public Assessment(String title, Type type, LocalDate startDate, LocalDate endDate,
                      int courseId) {
        this.title = title;
        this.type = type;
        this.startDate = startDate;
        this.endDate = endDate;
        this.courseId = courseId;
    }

    /**
     * Constructor for Assessment.
     *
     * @param id The id of the assessment. Cannot be null.
     * @param title The name of the assessment
     * @param type The type of assessment, using enumeration Type
     * @param startDate The start date of the assessment
     * @param endDate The end date of the assessment
     * @param courseId The ID of the course the assessment is for
     */
    public Assessment(@NonNull int id, String title, Type type, LocalDate startDate,
                      LocalDate endDate, int courseId) {
        this.id = id;
        this.title = title;
        this.type = type;
        this.startDate = startDate;
        this.endDate = endDate;
        this.courseId = courseId;
    }

    /**
     * Getter for ID.
     *
     * <p> This is the getter for the ID of an assessment. An ID is autogenerated by the database. </p>
     * @return The ID of the assessment
     */
    public int getId() {
        return id;
    }

    /**
     * Setter for ID.
     *
     * <p> This is the setter for the ID of an assessment. An ID is autogenerated by the database. </p>
     * @param id The ID the assessment will have.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for title.
     *
     * <p> This is the getter for the title of an assessment. </p>
     * @return The title of the assessment
     */
    public String getTitle() {
        return title;
    }

    /**
     * Setter for title.
     *
     * <p> This is the setter for the title of an assessment. </p>
     * @param title The title the assessment will have
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for type.
     *
     * <p> This is the getter for the type of an assessment. </p>
     * @return The Type of an assessment.
     */
    public Type getType() {
        return type;
    }

    /**
     * Setter for type.
     *
     * <p> This is the setter for the type of an assessment. </p>
     * @param type The Type the assessment will have
     */
    public void setType(Type type) {
        this.type = type;
    }

    /**
     * Getter for the Start Date.
     *
     * <p> This is the getter for the start date of an assessment. </p>
     * @return The start date of the assessment
     */
    public LocalDate getStartDate() {
        return startDate;
    }

    /**
     * Setter for the Start Date.
     *
     * <p> This is the setter for the start date of an assessment. </p>
     * @param startDate The start date the assessment will have
     */
    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    /**
     * Getter for the End Date.
     *
     * <p> This is the getter for the end date of an assessment. </p>
     * @return The end date of the assessment
     */
    public LocalDate getEndDate() {
        return endDate;
    }

    /**
     * Setter for the End Date.
     *
     * <p> This is the setter for the end date of an assessment. </p>
     * @param endDate The end date the assessment will have
     */
    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    /**
     * Getter for Course ID.
     *
     * <p> This is the getter for the ID of the course the assessment is for. </p>
     * @return The ID of the course the assessment is for
     */
    public int getCourseId() {
        return courseId;
    }

    /**
     * Setter for Course ID.
     *
     * <p> This is the setter for the ID of the course the assessment is for. </p>
     * @param courseId the ID of the course the assessment will be for
     */
    public void setCourseId(int courseId) {
        this.courseId = courseId;
    }

    /**
     * Overrides the toString() method.
     *
     * @return A formatted String containing the assessment's title, type, start date, and end date
     */
    @Override
    public String toString() {
        return "Assessment{" +
                "title='" + title + '\'' +
                ", type=" + type +
                ", startDate=" + startDate +
                ", endDate=" + endDate +
                '}';
    }

    /**
     * Overrides the equals() method.
     *
     * @param obj The object to be compared to
     * @return Returns true of obj is an Assessment and has the same id
     */
    @Override
    public boolean equals(@Nullable Object obj) {
        if (obj instanceof Assessment)
            return (id == ((Assessment) obj).getId());
        else
            return false;
    }

    /**
     * Enum for an Assessment.
     *
     * <p> This is an enumeration for an Assessment. It contains the Assessment's type. </p>
     */
    public enum Type {
        PERFORMANCE("Performance"),
        OBJECTIVE("Objective");

        private String name;

        public static final List<Type> typeList =
                Arrays.asList(PERFORMANCE, OBJECTIVE);

        Type(String name) {
            this.name = name;
        }

        /**
         * Override of toString().
         *
         * <p> This method overrides the toString() method and returns the Type in a formatted
         * String. </p>
         * @return Returns the name of the Type
         */
        @Override
        public String toString() {
            return name;
        }
    }
}
