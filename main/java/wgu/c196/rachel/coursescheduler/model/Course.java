package wgu.c196.rachel.coursescheduler.model;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * Class for a Course.
 *
 * <p> This class defines a Course for a school. It contains information on the title, start and
 * end dates, status, course instructor, the term the course occurs in, and a note about the course. </p>
 */
@Entity(tableName = "course_table",
        foreignKeys = {@ForeignKey(entity = Term.class, parentColumns = "id",
                childColumns = "term_id", onDelete = ForeignKey.CASCADE),
                @ForeignKey(entity = CourseInstructor.class, parentColumns = "id",
                        childColumns = "course_instructor", onDelete = ForeignKey.SET_NULL)} )
public class Course {

    @PrimaryKey(autoGenerate = true)
    private int id;

    private String title;

    @ColumnInfo(name = "start_date")
    private LocalDate startDate;

    @ColumnInfo(name = "end_date")
    private LocalDate endDate;

    private Status status;

    @ColumnInfo(name = "course_instructor")
    private int courseInstructorId;

    private String note;

    // The term the course is in
    @ColumnInfo(name = "term_id")
    private int termId;

//    @ColumnInfo(name = "associated_assessments")
//    private List<Assessment> associatedAssessments;

    /**
     * Default constructor for Course.
     */
    public Course() {
    }

    /**
     * Constructor for Course.
     *
     * @param title The title of the course
     * @param startDate The start date of the course
     * @param endDate The end date of the course
     * @param status The status of the course, i.e. Status.COMPLETED
     * @param courseInstructorId The ID of the assigned course instructor
     */
    public Course(String title, LocalDate startDate, LocalDate endDate, Status status, int courseInstructorId) {
        this.title = title;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.courseInstructorId = courseInstructorId;
        note = "";
    }

    /**
     * Constructor for Course.
     *
     * @param id The id of the course. Cannot be null.
     * @param title The title of the course
     * @param startDate The start date of the course
     * @param endDate The end date of the course
     * @param status The status of the course, i.e. Status.COMPLETED
     * @param courseInstructorId The ID of the assigned course instructor
     * @param note A note about the course
     * @param termId The ID of the term the course occurs in
     */
    public Course(@NonNull int id, String title, LocalDate startDate, LocalDate endDate, Status status,
                  int courseInstructorId, String note,
                  int termId) {
        this.id = id;
        this.title = title;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.courseInstructorId = courseInstructorId;
        this.note = note;
        this.termId = termId;
    }

    /**
     * Getter for ID.
     *
     * <p> This is the getter for the ID of a course. An ID is autogenerated by the database. </p>
     * @return The ID of the course
     */
    public int getId() {
        return id;
    }

    /**
     * Setter for ID.
     *
     * <p> This is the setter for the ID of a course. An ID is autogenerated by the database. </p>
     * @param id The ID the course will have.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for title.
     *
     * <p> This is the getter for the title of a course. </p>
     * @return The title of the course
     */
    public String getTitle() {
        return title;
    }

    /**
     * Setter for title.
     *
     * <p> This is the setter for the title of a course. </p>
     * @param title The title the course will have
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for the start date.
     *
     * <p> This is the getter for the start date of a course. </p>
     * @return The start date of the course
     */
    public LocalDate getStartDate() {
        return startDate;
    }

    /**
     * Setter for the start date.
     *
     * <p> This is the setter for the start date of a course. </p>
     * @param startDate The start date the course will have
     */
    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    /**
     * Getter for the end date.
     *
     * <p> This is the getter for the end date of a course. </p>
     * @return The end date of the course
     */
    public LocalDate getEndDate() {
        return endDate;
    }

    /**
     * Setter for the end date.
     *
     * <p> This is the setter for the end date of a course. </p>
     * @param endDate The end date the course will have
     */
    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    /**
     * Getter for status.
     *
     * <p> This is the getter for the status of a course. </p>
     * @return The status of the course
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Setter for status.
     *
     * <p> This is the setter for the status of a course. </p>
     * @param status The status the course will have
     */
    public void setStatus(Status status) {
        this.status = status;
    }

    /**
     * Getter for course instructor ID.
     *
     * <p> This is the getter for the instructor of a course. </p>
     * @return The ID of the course instructor
     */
    public int getCourseInstructorId() {
        return courseInstructorId;
    }

    /**
     * Setter for course instructor ID.
     *
     * <p> This is the setter for the instructor of a course. </p>
     * @param courseInstructorId The ID of the instructor the course will have
     */
    public void setCourseInstructorId(int courseInstructorId) {
        this.courseInstructorId = courseInstructorId;
    }

    /**
     * Getter for note.
     *
     * <p> This is the getter for the note of a course. </p>
     * @return The note of the course
     */
    public String getNote() {
        return note;
    }

    /**
     * Setter for note.
     *
     * <p> This is the setter for the note of a course. </p>
     * @param note The note the course will have
     */
    public void setNote(String note) {
        this.note = note;
    }

//    /**
//     * Getter for the associated assessments.
//     *
//     * <p> This is the getter for the list of associated assessments of a course. </p>
//     * @return The list of associated assessments of the course
//     */
//    public List<Assessment> getAssociatedAssessments() {
//        return associatedAssessments;
//    }
//
//    /**
//     * Setter for associated assessments.
//     *
//     * <p> This is the setter for the list of associated assessments of a course. </p>
//     * @param associatedAssessments The list of associated assessments the course will have
//     */
//    public void setAssociatedAssessments(List<Assessment> associatedAssessments) {
//        this.associatedAssessments = associatedAssessments;
//    }


    /**
     * Getter for term ID.
     *
     * <p> This is the getter for the ID of the term the course occurs in. </p>
     * @return The ID of the term the course occurs in
     */
    public int getTermId() {
        return termId;
    }

    /**
     * Setter for term ID.
     *
     * <p> This is the setter for the ID of the term the course occurs in. </p>
     * @param termId The ID of the term the course will occur in
     */
    public void setTermId(int termId) {
        this.termId = termId;
    }

    /**
     * Overrides the toString() method.
     *
     * @return The title of the Course
     */
    @Override
    public String toString() {
        return title;
    }

    /**
     * Overrides the equals() method.
     *
     * @param obj The object it will be compared to
     * @return Returns true if obj is a Course and has the same id
     */
    @Override
    public boolean equals(@Nullable Object obj) {
        if (obj instanceof Course)
            return (id == ((Course) obj).getId());
        else
            return false;
    }

    /**
     * Enum for a Course.
     *
     * <p> This is an enumeration for a Course. It contains the Course's status. </p>
     */
    public enum Status {
        IN_PROGRESS("In progress"),
        COMPLETED("Completed"),
        DROPPED("Dropped"),
        PLAN_TO_TAKE("Plan to take");

        private String name;

        public static final List<Status> statusList =
                Arrays.asList(IN_PROGRESS, COMPLETED, DROPPED, PLAN_TO_TAKE);

        Status(String name) {
            this.name = name;
        }

        /**
         * Override of toString().
         *
         * <p> This method overrides the toString() method and returns the Status in a formatted
         * String. </p>
         * @return Returns the name of the Status
         */
        @Override
        public String toString() {
            return name;
        }
    }
}
